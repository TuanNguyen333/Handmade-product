@page
@model UI.Pages.Seller.StatusTrackingModel
@{
    ViewData["Title"] = "Status Tracking";

    var statusList = Model.StatusChanges;
    var statusMapping = new Dictionary<string, string>
    {
        { "Pending", "Order Placed" },
        { "Awaiting Payment", "Order is awaiting payment" },
        { "Processing", "Order is being prepared" },
        { "Delivering", "Order is being shipped" },
        { "Shipped", "Order was delivered successfully" },
        { "Canceled", "Order has been cancelled" } 
    };

    string GetStatusDate(string status) =>
        statusList?.FirstOrDefault(s => s.Status == status)?.ChangeTime.ToString("dd MMM yyyy, HH:mm") ?? "";

    bool IsStatusReached(string status) =>
        statusList.Any(s => s.Status == status);

    string GetOrderStatusMessage()
    {
        var lastStatus = statusList?.OrderByDescending(s => s.ChangeTime).FirstOrDefault()?.Status;

        return lastStatus switch
        {
            "Pending" => "Order Placed",
            "Awaiting Payment" => "Order is awaiting payment",
            "Processing" => "Order is being prepared",
            "Delivering" => "Order is being shipped",
            "Shipped" => "Order was delivered successfully",
            "Canceled" => "Order has been cancelled", 
            _ => "Unknown Order Status"
        };
    }
}
<div class="flex items-center justify-between py-4">
    <a href="javascript:history.back()" class="text-lg font-semibold text-black hover:underline">← Return</a>
    <div class="text-lg font-semibold">
        Mã Đơn Hàng: @Model.OrderId
    </div>
    @if (GetOrderStatusMessage() != "Order has been cancelled")
    {
        <div class="text-lg font-semibold text-green-700">
            @GetOrderStatusMessage()
        </div>
    }
</div>

<div class="mt-6 grow sm:mt-8 lg:mt-0">
    <div class="space-y-6 rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-black dark:bg-gray-200">
        <h3 class="text-xl font-semibold text-black">Order Status</h3>

        @if (IsStatusReached("Canceled")) 
        {
            <p class="text-lg text-red-600">Order has been cancelled</p>
        }
        else
        {
            <ol class="relative ms-3 border-s border-gray-200 dark:border-gray-700">
                @foreach (var status in statusMapping.Reverse())
                {
                    bool isReached = IsStatusReached(status.Key);
                    var statusDate = GetStatusDate(status.Key);
                    <li class="mb-10 ms-6 @(isReached ? "text-blue-600" : "text-black")">
                        <span class="absolute -start-3 flex h-6 w-6 items-center justify-center rounded-full @(isReached ? "bg-blue-200" : "bg-gray-100")">
                            <svg class="h-4 w-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                @if (isReached)
                                {
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 11.917 9.724 16.5 19 7.5" />
                                }
                                else
                                {
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h6l2 4m-8-4v8m0-8V6a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v9h2m8 0H9m4 0h2m4 0h2v-4m0 0h-5m3.5 5.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Zm-10 0a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z" />
                                }
                            </svg>
                        </span>
                        <h4 class="mb-0.5 text-base font-semibold @(isReached ? "text-blue-600" : "text-black")">@status.Value</h4>
                        <p class="text-sm">@statusDate</p>
                    </li>
                }
            </ol>
        }
    </div>
</div>
