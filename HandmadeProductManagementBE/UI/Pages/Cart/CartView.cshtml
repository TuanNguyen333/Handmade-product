@page
@model UI.Pages.Cart.CartViewModel
@{
    ViewData["Title"] = "Cart";
}

<div class="mb-20 h-screen bg-gray-100">
    <div class="container mx-auto px-4">
        <h1 class="mb-4 text-4xl font-semibold">Your Cart</h1>

        @if (Model.CartItems != null && Model.CartItems.Any())
        {
            <div class="flex flex-col gap-4 md:flex-row">
                <div class="md:w-3/4">
                    @foreach (var group in Model.CartItems)
                    {
                        <div class="mb-4 rounded-lg bg-white p-6 shadow-md">
                            <a href="/Shop/Index?id=@group.ShopId" class="text-lg font-semibold">@group.ShopName</a>
                            <table class="w-full" data-shop-id="@group.ShopId">
                                <thead>
                                    <tr>
                                        <th class="text-left font-normal">Product</th>
                                        <th class="text-left font-normal">Price</th>
                                        <th class="text-left font-normal">Discount Price</th>
                                        <th class="text-left font-normal">Variation Options</th>
                                        <th class="text-left font-normal">Quantity</th>
                                        <th class="text-left font-normal">Total</th>
                                        <th class="text-left font-normal">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in group.CartItems)
                                    {
                                        <tr>
                                            <td>
                                                <div class="flex items-center">
                                                    <img class="h-20 w-20" src="@item.ImageUrl" alt="@item.ProductName" />
                                                    <a href="/ProductDetail/ProductDetail?id=@item.ProductId" class="ml-4 block font-semibold">@item.ProductName</a>
                                                </div>
                                            </td>
                                            <td>₫@item.UnitPrice</td>
                                            <td>₫@Math.Round(item.DiscountPrice, 0, MidpointRounding.AwayFromZero)</td>
                                            <td>
                                                @if (item.VariationOptionValues != null && item.VariationOptionValues.Any())
                                                {
                                                    <ul>
                                                        @foreach (var option in item.VariationOptionValues)
                                                        {
                                                            <li>@option</li>
                                                        }
                                                    </ul>
                                                }
                                            </td>
                                            <td>
                                                <input type="number" id="quantity-@item.Id" min="1" value="@item.ProductQuantity" class="w-16 text-center" onchange="updateTotal('@item.Id', @item.DiscountPrice, '@group.ShopId')" />
                                            </td>
                                            <td id="total-@item.Id">₫@Math.Round(item.DiscountPrice * item.ProductQuantity, 0, MidpointRounding.AwayFromZero)</td>
                                            <td>
                                                <button class="text-white font-bold py-2 px-4 rounded" style="background-color: red" type="button" onclick="deleteItem('@item.Id')">Delete</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="4" style="text-align: right;"><strong>Subtotal</strong></td>
                                        <td id="subtotal-@group.ShopId">₫@Math.Round(group.CartItems.Sum(item => item.DiscountPrice * item.ProductQuantity), 0, MidpointRounding.AwayFromZero)</td>
                                        <td></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    }
                    <div class="rounded-lg bg-white p-6 shadow-md">
                        <h2 class="text-lg font-semibold">Total</h2>
                        <p class="text-lg" id="totalAmount">₫@Math.Round(Model.Total, 0, MidpointRounding.AwayFromZero)</p>
                        <button class="mt-4 w-full rounded-lg bg-blue-500 px-4 py-2 text-white" type="button" onclick="checkout()">Checkout</button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>Your cart is empty.</p>
        }

        @* Thông báo lỗi *@
        @if (!Model.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                @foreach (var error in Model.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <p>@error.ErrorMessage</p>
                }
            </div>
        }
    </div>
</div>

<script>
    async function deleteItem(cartItemId) {
        if (confirm("Are you sure you want to remove this item?")) {
            try {
                const response = await fetch(`/api/cartitem/${cartItemId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (response.ok && result.Code === "Success") {
                    document.querySelector(`#quantity-${cartItemId}`).closest('tr').remove();
                    updateCartTotal();
                    alert(result.Message);
                } else {
                    alert("Failed to delete item: " + result.Message);
                }
            } catch (error) {
                console.error("Error deleting item:", error);
                alert("An error occurred while deleting the item.");
            }
        }
    }

    async function checkout() {
        const quantities = {};
        document.querySelectorAll('input[type="number"]').forEach(input => {
            const itemId = input.id.split('-')[1];
            quantities[itemId] = parseInt(input.value) || 0;
        });

        const queryString = new URLSearchParams(quantities).toString();
        window.location.href = '/Checkout?' + queryString;
    }

    function updateTotal(itemId, price, shopId) {
        var quantity = parseInt(document.getElementById('quantity-' + itemId).value) || 0;
        var totalPrice = Math.round(price * quantity);

        document.getElementById('total-' + itemId).innerText = '₫' + totalPrice;
        updateSubtotal(shopId);
        updateCartTotal();
    }

    function updateSubtotal(shopId) {
        let subtotal = 0;

        const rows = document.querySelector(`table[data-shop-id="${shopId}"]`).querySelectorAll('tbody tr');
        rows.forEach(row => {
            const totalCell = row.querySelector('td[id^="total-"]');
            if (totalCell) {
                subtotal += Math.round(parseFloat(totalCell.innerText.replace('₫', '').replace(',', ''))) || 0;
            }
        });

        const subtotalCell = document.getElementById('subtotal-' + shopId);
        if (subtotalCell) {
            subtotalCell.innerText = '₫' + subtotal;
        }
    }

    function updateCartTotal() {
        let totalAmount = 0;

        document.querySelectorAll('tr').forEach(row => {
            const totalCell = row.querySelector('td[id^="total-"]');
            if (totalCell) {
                totalAmount += Math.round(parseFloat(totalCell.innerText.replace('₫', '').replace(',', ''))) || 0;
            }
        });

        document.getElementById('totalAmount').innerText = '₫' + totalAmount;
    }
</script>
