@page
@model UI.Pages.Product.ProductSellerModel
@{
    ViewData["Title"] = "Product Seller List";
}


<h1 class="text-3xl font-bold mb-4">Product List</h1>

<div class="search-filter">
    <form method="get" class="flex space-x-4 items-center">
        <input class="border border-gray-300 rounded-md p-2" type="text" name="Name" placeholder="Search by name" value="@Request.Query["Name"]" onchange="this.form.submit();" />
        <select name="CategoryId" class="border border-gray-300 rounded-md p-2">
            <option value="">Select Category</option>
            @if (Model.Categories != null && Model.Categories.Any())
            {
                foreach (var category in Model.Categories)
                {
                    var isSelected = Request.Query["CategoryId"] == category.Id.ToString();
                    if (isSelected)
                    {
                        <option value="@category.Id" selected>@category.Name</option>
                    }
                    else
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                }
            }
        </select>
        @{
            var selectedStatus = Request.Query["Status"].ToString();
        }

        <select name="Status" class="border border-gray-300 rounded-md p-2">
            @if (string.IsNullOrEmpty(selectedStatus))
            {
                <option value="" selected>Select Status</option>
            }
            else
            {
                <option value="">Select Status</option>
            }

            @if (selectedStatus == "Available")
            {
                <option value="Available" selected>Available</option>
            }
            else
            {
                <option value="Available">Available</option>
            }

            @if (selectedStatus == "OutOfStock")
            {
                <option value="OutOfStock" selected>Out Of Stock</option>
            }
            else
            {
                <option value="OutOfStock">Out Of Stock</option>
            }
        </select>
        <input class="border border-gray-300 rounded-md p-2" type="number" name="MinRating" placeholder="Min Rating" min="0" max="5" value="@Request.Query["MinRating"]" />

        <div class="flex items-center space-x-4">
            <label class="flex items-center">
                <input type="radio" id="sortByPrice" name="SortOption" value="SortByPrice"
                @(Request.Query["SortOption"] == "SortByPrice" ? "checked" : "") onchange="this.form.submit();" />
                <span class="ml-2">Sort by Price</span>
            </label>

            <label class="flex items-center">
                <input type="radio" id="sortByRating" name="SortOption" value="SortByRating"
                @(Request.Query["SortOption"] == "SortByRating" ? "checked" : "") onchange="this.form.submit();" />
                <span class="ml-2">Sort by Rating</span>
            </label>
        </div>



        <label class="flex items-center">
            <span class="mr-2">Sort Descending:</span>
            <input type="checkbox" name="sortDescending" value="true" 
                   @(Request.Query["SortDescending"] == "true" ? "checked" : "") onchange="this.form.submit();" />
        </label>

        <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600">Search</button>
        <button type="button" class="bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600"
                onclick="openAddProductModal()">
            Add Product
        </button>
    </form>
</div>

<!-- Add Product Modal -->
<div id="addProductModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
    <div class="relative top-20 mx-auto p-5 border w-[800px] shadow-lg rounded-md bg-white">
        <form method="post" enctype="multipart/form-data" id="addProductForm">
            <h3 class="text-2xl font-bold mb-4">Add New Product</h3>

            <!-- Basic Product Information -->
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="productName">Product Name</label>
                <input type="text" id="productName" name="Name" required
                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
            </div>

            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="productDescription">Description</label>
                <textarea id="productDescription" name="Description" rows="3"
                          class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"></textarea>
            </div>

            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="categoryId">Category</label>
                <select id="categoryId" name="CategoryId" required onchange="loadCategoryVariations(this.value)"
                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                    <option value="">Select Category</option>
                    @if (Model.Categories != null)
                    {
                        @foreach (var category in Model.Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    }
                </select>
            </div>

            <!-- Product Images Upload -->
            <div class="mb-4">
                <label class="block text-gray-700 text-sm font-bold mb-2" for="productImages">Product Images</label>
                <input type="file" id="productImages" name="ProductImages" accept="image/*" multiple
                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                <div id="imagePreviewContainer" class="flex flex-wrap gap-2 mt-2"></div>
            </div>

            <!-- Variations Section -->
            <div class="mb-4">
                <h4 class="text-lg font-bold mb-2">Variations</h4>
                <div id="variationsContainer">
                    <!-- Existing variations will be loaded here -->
                </div>

                <!-- Add New Variation Form -->
                <div id="newVariationForm" class="mt-4 p-4 border rounded hidden">
                    <h5 class="font-bold mb-2">Add New Variation</h5>
                    <div class="mb-2">
                        <input type="text" id="newVariationName" placeholder="Variation Name"
                               class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-2">
                    </div>
                    <div id="newVariationOptions" class="mb-2">
                        <div class="flex gap-2 mb-2">
                            <input type="text" placeholder="Option Value"
                                   class="shadow appearance-none border rounded flex-1 py-2 px-3 text-gray-700">
                            <button type="button" onclick="removeVariationOption(this)"
                                    class="bg-red-500 text-white py-1 px-3 rounded-md hover:bg-red-600">
                                Remove
                            </button>
                        </div>
                    </div>
                    <button type="button" onclick="addVariationOption()"
                            class="bg-blue-500 text-white py-1 px-3 rounded-md hover:bg-blue-600 mr-2">
                        Add Option
                    </button>
                    <button type="button" onclick="saveNewVariation()"
                            class="bg-green-500 text-white py-1 px-3 rounded-md hover:bg-green-600">
                        Save Variation
                    </button>
                </div>

                <button type="button" onclick="toggleNewVariationForm()"
                        class="mt-2 bg-blue-500 text-white py-1 px-3 rounded-md hover:bg-blue-600">
                    Add New Variation
                </button>
            </div>

            <!-- Variation Combinations Section -->
            <div class="mb-4">
                <h4 class="text-lg font-bold mb-2">Variation Combinations</h4>
                <div id="combinationsContainer" class="grid gap-4">
                    <!-- Combinations will be added here dynamically -->
                </div>
            </div>

            <div class="flex justify-end space-x-2">
                <button type="button" onclick="closeAddProductModal()"
                        class="bg-gray-500 text-white py-2 px-4 rounded-md hover:bg-gray-600">
                    Cancel
                </button>
                <button type="submit"
                        class="bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600">
                    Create Product
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Product Grid -->
@if (Model.Products != null && Model.Products.Any())
{
    <div class="py-16">
        <div class="container mx-auto px-4">
            <h2 class="text-3xl font-bold mb-8">Introducing Our Latest Products</h2>

            <!-- Responsive Grid Layout: 1 column on mobile, 2 columns on small screens, 4 columns on larger screens -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
                @foreach (var product in Model.Products)
                {
                    <div class="bg-white rounded-lg shadow-lg p-6">
                        <div class="relative overflow-hidden h-48">
                            <img class="object-cover w-full h-full" src="@product.ProductImageUrl" alt="@product.Name" />
                            <div class="absolute inset-0 bg-black opacity-40"></div>
                            <div class="absolute inset-0 flex items-center justify-center">
                                <button class="bg-white text-gray-900 py-2 px-6 rounded-full font-bold hover:bg-gray-300">View Product</button>
                            </div>
                        </div>
                        <h3 class="text-xl font-bold text-gray-900 mt-4">@product.Name</h3>
                        <p class="text-gray-500 text-sm mt-2">@product.Description</p>
                        <div class="flex items-center justify-between mt-4">
                            <span class="text-gray-900 font-bold text-lg">$@product.LowestPrice</span>
                            <button class="bg-gray-900 text-white py-2 px-4 rounded-full font-bold hover:bg-gray-800">Add to Cart</button>
                        </div>
                        <div class="text-sm text-gray-500 mt-2">Rating: @product.Rating | Status: @product.Status</div>
                    </div>
                }
            </div>
        </div>
    </div>
}
else
{
    <p>No products found matching your criteria.</p>
}
@{
    var paginationModel = new UI.Pages.Shared.PaginationModel
            {
                PageNumber = Model.PageNumber,
                PageSize = Model.PageSize
            };
}

<partial name="~/Pages/Shared/_Pagination.cshtml" model="paginationModel" />

@section Scripts {
    <script>
        // State management for variations and combinations
        let variations = [];
        let variationCombinations = [];
        let isNewVariationFormVisible = false;

        // Modal management
        function openAddProductModal() {
            document.getElementById('addProductModal').classList.remove('hidden');
        }

        function closeAddProductModal() {
            document.getElementById('addProductModal').classList.add('hidden');
            document.getElementById('addProductForm').reset();
            document.getElementById('imagePreviewContainer').innerHTML = '';
            document.getElementById('variationsContainer').innerHTML = '';
            document.getElementById('combinationsContainer').innerHTML = '';
            variations = [];
            variationCombinations = [];
        }

        // Add the missing toggleNewVariationForm function
        function toggleNewVariationForm() {
            const form = document.getElementById('newVariationForm');
            isNewVariationFormVisible = !isNewVariationFormVisible;
            form.classList.toggle('hidden', !isNewVariationFormVisible);
        }

        // Add variation option handling
        function addVariationOption() {
            const container = document.getElementById('newVariationOptions');
            const optionDiv = document.createElement('div');
            optionDiv.className = 'flex gap-2 mb-2';
            optionDiv.innerHTML = `
                        <input type="text" placeholder="Option Value"
                               class="shadow appearance-none border rounded flex-1 py-2 px-3 text-gray-700">
                        <button type="button" onclick="removeVariationOption(this)"
                                class="bg-red-500 text-white py-1 px-3 rounded-md hover:bg-red-600">
                            Remove
                        </button>
                    `;
            container.appendChild(optionDiv);
        }

        function removeVariationOption(button) {
            button.closest('.flex').remove();
        }

        // Updated loadCategoryVariations function
        async function loadCategoryVariations(categoryId) {
            if (!categoryId) {
                document.getElementById('variationsContainer').innerHTML = '';
                return;
            }

            try {
                const response = await fetch(`?handler=Variations&categoryId=${categoryId}`, {
                    method: 'GET',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value,
                        'Accept': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.statusCode === 200 && result.data) {
                    variations = result.data;
                    displayVariations();
                    // Clear existing combinations when variations change
                    document.getElementById('combinationsContainer').innerHTML = '';
                    variationCombinations = [];
                }
            } catch (error) {
                console.error('Error loading variations:', error);
            }
        }

        // Updated saveNewVariation function
        async function saveNewVariation() {
            const variationName = document.getElementById('newVariationName').value;
            const optionInputs = document.querySelectorAll('#newVariationOptions input[type="text"]');
            const options = Array.from(optionInputs).map(input => input.value).filter(value => value.trim() !== '');

            if (!variationName || options.length === 0) {
                alert('Please enter a variation name and at least one option');
                return;
            }

            const categoryId = document.getElementById('categoryId').value;
            if (!categoryId) {
                alert('Please select a category first');
                return;
            }

            const newVariation = {
                name: variationName,
                categoryId: categoryId,
                options: options.map(opt => ({ value: opt }))
            };

            try {
                // First create the variation
                const variationResponse = await fetch('/api/variation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(newVariation)
                });

                if (!variationResponse.ok) {
                    throw new Error('Failed to create variation');
                }

                const variationResult = await variationResponse.json();

                // Reload variations after successful creation
                await loadCategoryVariations(categoryId);

                // Clear and hide the form
                document.getElementById('newVariationName').value = '';
                document.getElementById('newVariationOptions').innerHTML = '';
                toggleNewVariationForm();

                alert('Variation created successfully!');
            } catch (error) {
                console.error('Error creating variation:', error);
                alert('Failed to create variation. Please try again.');
            }
        }

        // Image handling
        function handleImageUpload(event) {
            const container = document.getElementById('imagePreviewContainer');
            const files = event.target.files;

            if (!event.target.multiple) {
                container.innerHTML = '';
            }

            Array.from(files).forEach(file => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const preview = document.createElement('div');
                    preview.className = 'relative w-24 h-24';
                    preview.innerHTML = `
                        <img src="${e.target.result}" class="w-full h-full object-cover rounded">
                        <button type="button" onclick="removeImage(this)"
                                class="absolute top-0 right-0 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center">
                            ×
                        </button>
                    `;
                    container.appendChild(preview);
                }
                reader.readAsDataURL(file);
            });
        }

        function removeImage(button) {
            button.closest('.relative').remove();
        }

        // Variation handling
        async function loadCategoryVariations(categoryId) {
            if (!categoryId) {
                document.getElementById('variationsContainer').innerHTML = '';
                return;
            }

            try {
                const response = await fetch(`${window.location.origin}/api/variation/category/${categoryId}`);
                const result = await response.json();

                if (result.statusCode === 200 && result.data) {
                    variations = result.data;
                    displayVariations();
                }
            } catch (error) {
                console.error('Error loading variations:', error);
            }
        }

        function displayVariations() {
            const container = document.getElementById('variationsContainer');
            container.innerHTML = '';

            variations.forEach(variation => {
                const variationElement = createVariationElement(variation);
                container.appendChild(variationElement);
            });
        }

        function createVariationElement(variation) {
            const div = document.createElement('div');
            div.className = 'mb-4 p-4 border rounded';
            div.innerHTML = `
                <h5 class="font-bold mb-2">${variation.name}</h5>
                <div class="options-container" data-variation-id="${variation.id}">
                    ${variation.options.map(option => `
                        <label class="inline-flex items-center mr-4 mb-2">
                            <input type="checkbox" value="${option.id}"
                                   class="form-checkbox h-4 w-4 text-blue-600"
                                   onchange="handleOptionChange()">
                            <span class="ml-2">${option.value}</span>
                        </label>
                    `).join('')}
                </div>
            `;
            return div;
        }

        // Combination handling
        function handleOptionChange() {
            const selectedCombinations = generateCombinations();
            displayCombinations(selectedCombinations);
        }

        function generateCombinations() {
            const containers = document.querySelectorAll('.options-container');
            const selectedOptions = new Map();

            containers.forEach(container => {
                const variationId = container.dataset.variationId;
                const checkedOptions = Array.from(container.querySelectorAll('input[type="checkbox"]:checked'))
                    .map(cb => ({ id: cb.value }));

                if (checkedOptions.length > 0) {
                    selectedOptions.set(variationId, checkedOptions);
                }
            });

            if (selectedOptions.size === 0) return [];

            const arrays = Array.from(selectedOptions.values());
            let result = arrays[0].map(item => [item]);

            for (let i = 1; i < arrays.length; i++) {
                const temp = [];
                result.forEach(current => {
                    arrays[i].forEach(item => {
                        temp.push([...current, item]);
                    });
                });
                result = temp;
            }

            return result;
        }

        function displayCombinations(combinations) {
            const container = document.getElementById('combinationsContainer');
            container.innerHTML = '';
            variationCombinations = [];

            combinations.forEach((combination, index) => {
                const combinationId = `combination-${index}`;
                const optionNames = combination.map(opt => opt.value).join(' / ');
                const optionIds = combination.map(opt => opt.id);

                const div = document.createElement('div');
                div.className = 'grid grid-cols-3 gap-4 p-4 border rounded mb-2';
                div.innerHTML = `
                    <div class="col-span-1">
                        <p class="font-bold">Combination:</p>
                        <p>${optionNames}</p>
                    </div>
                    <div class="col-span-1">
                        <label class="block">
                            <span class="text-gray-700">Price</span>
                            <input type="number" min="0" step="0.01" required
                                   id="price-${combinationId}"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                   onchange="updateCombination('${combinationId}')">
                        </label>
                    </div>
                    <div class="col-span-1">
                        <label class="block">
                            <span class="text-gray-700">Stock Quantity</span>
                            <input type="number" min="0" required
                                   id="stock-${combinationId}"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                                   onchange="updateCombination('${combinationId}')">
                        </label>
                    </div>
                `;
                container.appendChild(div);

                variationCombinations.push({
                    combinationId,
                    optionIds,
                    price: 0,
                    stockQuantity: 0
                });
            });
        }

        function updateCombination(combinationId) {
            const price = parseFloat(document.getElementById(`price-${combinationId}`).value) || 0;
            const stockQuantity = parseInt(document.getElementById(`stock-${combinationId}`).value) || 0;

            const combination = variationCombinations.find(c => c.combinationId === combinationId);
            if (combination) {
                combination.price = price;
                combination.stockQuantity = stockQuantity;
            }
        }

        // Updated form submission handler
        async function handleFormSubmit(event) {
            event.preventDefault();

            const formData = new FormData(event.target);

            // Validate required fields
            const name = formData.get('Name');
            const categoryId = formData.get('CategoryId');

            if (!name || !categoryId) {
                alert('Please fill in all required fields');
                return;
            }

            // Add variation combinations
            const combinations = variationCombinations.map(combo => ({
                optionIds: combo.optionIds,
                price: combo.price,
                stockQuantity: combo.stockQuantity
            }));

            // Remove empty or invalid combinations
            const validCombinations = combinations.filter(combo =>
                combo.price > 0 && combo.stockQuantity > 0 && combo.optionIds.length > 0
            );

            formData.append('VariationCombinations', JSON.stringify(validCombinations));

            try {
                const response = await fetch('', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();
                if (result.statusCode === 200) {
                    alert('Product created successfully!');
                    closeAddProductModal();
                    window.location.reload();
                } else {
                    alert(result.message || 'Failed to create product');
                }
            } catch (error) {
                console.error('Error creating product:', error);
                alert('Error creating product. Please try again.');
            }
        }

        // Initialize event listeners
        document.addEventListener('DOMContentLoaded', function () {
            // Image upload handler
            document.getElementById('productImages').addEventListener('change', handleImageUpload);

            // Form submission handler
            document.getElementById('addProductForm').addEventListener('submit', handleFormSubmit);

            // Category change handler
            document.getElementById('categoryId').addEventListener('change', function () {
                loadCategoryVariations(this.value);
            });
        });
    </script>
}