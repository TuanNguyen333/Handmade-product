@page
@model UI.Pages.IndexModel
@{
    ViewData["Title"] = "Home page";
}

<<<<<<< HEAD
<div class="text-center">
    @if (Model.categories == null || !Model.categories.Any())
    {
        <p>No Found</p>
    }
    else
    {
        <h2>Category List</h2>
            <tbody>
                <ul>
                    @foreach (var category in Model.categories)
                    {
                        <li>
                            @category.Name
                        </li>
                    }
                </ul>

            </tbody>
    }

    <h1 class="text-blue-700">Welcome to the Handmade Product Management System</h1>
    <p>Use the navigation to interact with various functionalities.</p>

    @if (Model.products == null || !Model.products.Any())
    {
        <p>No WeatherForecasts Found</p>
    }
    else
    {
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Rating</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in Model.products)
                {
                    <tr>
                        <td>@product.Name</td>
                        <td>@product.Rating</td>
                    </tr>
                }
            </tbody>
        </table>

    }
=======
<div class="flex px-40">
    <div class="w-1/2 overflow-hidden">
        @await Html.PartialAsync("_Top10SellingProducts", Model.Top10SellingProducts)
    </div>
>>>>>>> dev

    <div class="w-1/2 overflow-hidden">
        @await Html.PartialAsync("_Top10NewProducts", Model.Top10NewProducts)
    </div>
</div>

@section Scripts {
    <!-- Swiper Initialization for Selling Products -->
    <script>

        var sellingSwiper = new Swiper('.selling-products-swiper', {
            slidesPerView: 1,
            spaceBetween: 30,
            loop: true,
            pagination: {
                el: '.selling-products-swiper .swiper-pagination',
                clickable: true,
            },
            navigation: {
                nextEl: '.selling-products-swiper .swiper-button-next',
                prevEl: '.selling-products-swiper .swiper-button-prev',
            },
        });
    </script>

    <!-- Swiper Initialization for New Products -->
    <script>
        var newProductsSwiper = new Swiper('.new-products-swiper', {
            slidesPerView: 1,
            spaceBetween: 30,
            loop: true,
            pagination: {
                el: '.new-products-swiper .swiper-pagination',
                clickable: true,
            },
            navigation: {
                nextEl: '.new-products-swiper .swiper-button-next',
                prevEl: '.new-products-swiper .swiper-button-prev',
            },
        });
    </script>

    <script>
        // Ensure the token is properly encoded to prevent XSS attacks
        var token = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Token));
                        console.log("Token:", token); // You can remove this line after verifying

        // Example usage of the token in an API request
        /*
        fetch('/api/your-endpoint', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            console.log(data);
        })
        .catch(error => console.error('Error:', error));
        */
    </script>


}
