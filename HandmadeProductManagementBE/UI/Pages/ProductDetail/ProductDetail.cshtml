@page
@using UI.Pages.Shared
@using Microsoft.AspNetCore.Http
@using System.IdentityModel.Tokens.Jwt
@model UI.Pages.ProductDetail.ProductDetailModel

@{
    ViewData["Title"] = "ProductDetail";
    var productItems = Model.productDetail?.ProductItems;
    var message = TempData["Message"];
    var messageType = TempData["MessageType"];
    string getUserId(string token)
    {
        var handler = new JwtSecurityTokenHandler();
        var jsonToken = handler.ReadToken(token) as JwtSecurityToken;
        var userId = jsonToken?.Claims.FirstOrDefault(c => c.Type == "nameid")?.Value;

        return userId;
    }
    var token = HttpContext.Session.GetString("Token");
    var userId = token != null ? getUserId(token) : string.Empty;
}

<style>
    /* Ẩn nút tăng giảm trên Chrome, Safari và Edge */
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Ẩn nút tăng giảm trên Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }
</style>
@{
    var errorModel = new ErrorMessageModel
            {
                ErrorMessage = Model.ErrorMessage,
                ErrorDetail = Model.ErrorDetail
            };
}
@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <partial name="_ErrorMessage" model="errorModel" />
}

<!-- Toast Container -->
<div aria-live="polite" aria-atomic="true" class="fixed right-4 top-4 z-50 space-y-4">
    <!-- Hiển thị Toast thông báo lỗi nếu có trong TempData -->
    @if (TempData["Message"] != null)
    {
        <div class="border-l-4 w-full max-w-sm transform rounded-lg border-red-700 bg-red-500 p-4 text-white shadow-lg transition-all duration-300 ease-in-out" role="alert">
            <div class="flex items-start justify-between">
                <span>@TempData["Message"]</span>
                <button type="button" class="text-white hover:text-gray-200" onclick="this.parentElement.parentElement.remove()">✕</button>
            </div>
        </div>
    }

    <!-- Hiển thị Toast thông báo thành công nếu có trong TempData -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="border-l-4 w-full max-w-sm transform rounded-lg border-green-700 bg-green-500 p-4 text-white shadow-lg transition-all duration-300 ease-in-out" role="alert">
            <div class="flex items-start justify-between">
                <span>@TempData["SuccessMessage"]</span>
                <button type="button" class="text-white hover:text-gray-200" onclick="this.parentElement.parentElement.remove()">✕</button>
            </div>
        </div>
    }
</div>


<div class="flex flex-wrap p-6">
    <!-- Left side: Product Images -->
    <div class="z-10 fixed bottom-0 right-0 mb-5 mr-5 rounded-full shadow-2xl sm:mr-6 sm:mb-6">
        <div class="flex items-center justify-center rounded-full bg-teal-500 p-3 opacity-75 sm:p-4">
            <svg class="h-6 w-6 fill-current text-gray-200 sm:h-10 sm:w-10" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path d="M2 5a2 2 0 012-2h7a2 2 0 012 2v4a2 2 0 01-2 2H9l-3 3v-3H4a2 2 0 01-2-2V5z" />
                <path d="M15 7v2a4 4 0 01-4 4H9.828l-1.766 1.767c.28.149.599.233.938.233h2l3 3v-3h2a2 2 0 002-2V9a2 2 0 00-2-2h-1z" />
            </svg>
        </div>
        <div class="absolute left-0 top-0 ml-3 mt-3 sm:ml-4 sm:mt-4">
            <div class="flex h-3 w-3">
                <span class="absolute inline-flex h-2 w-2 animate-ping rounded-full bg-pink-400 opacity-75 sm:h-full sm:w-full"></span>
                <span class="relative inline-flex h-2 w-2 rounded-full bg-pink-500 sm:h-3 sm:w-3"></span>
            </div>
        </div>
    </div>

    <div class="w-full p-4 md:w-1/2">
        <div class="mb-4">
            <!-- Large Image -->
            <img src="@Model.productDetail?.ProductImageUrls.FirstOrDefault()" alt="Product Image" class="mx-auto h-[550px] w-[600px] rounded-lg object-cover shadow-md">
        </div>
        <div class="flex space-x-2">
            <!-- Small Images -->
            @if (Model.productDetail?.ProductImageUrls != null)
            {
                @for (int i = 1; i < Math.Min(4, Model.productDetail.ProductImageUrls.Count); i++)
                {
                    <img src="@Model.productDetail.ProductImageUrls[i]"
                         alt="Product Thumbnail"
                         class="h-20 w-1/5 cursor-pointer rounded-lg object-cover shadow-md">
                }
            }
           
        </div>
    </div>

    <!-- Right side: Product Details -->
    <div class="w-full space-y-6 p-4 md:w-1/2">
        <a href="javascript:void(0);" onclick="viewProduct()"
           class="flex items-center rounded-lg bg-gray-200 px-4 py-2 font-medium text-gray-600 transition duration-300 hover:text-gray-800">
            <i class="fa fa-arrow-left mr-2"></i> Back to Products
        </a>
        <!-- Product Name -->
        <h1 class="text-3xl font-bold text-gray-800">@Model.productDetail?.Name</h1>
        <h2 class="text-3xl font-bold text-gray-800">@Model.productDetail?.Description</h2>
        <!-- Product Rating -->
        <div class="rating-stars flex items-center space-x-1">
            <span class="text-lg text-gray-700">@Model.productDetail?.Rating.ToString("0.0")/5</span> <!-- Display rating in "4.6/5" format -->
            @for (int i = 1; i <= 5; i++)
            {
                if (i <= (Model.productDetail?.Rating ?? 0))
                {
                    <i class="fa fa-star" style="color: gold;"></i> <!-- Yellow star -->
                }
                else
                {
                    <i class="fa fa-star" style="color: gray;"></i> <!-- Gray star -->
                }
            }
        </div>

        <!-- Product Price -->
        <div class="flex items-center space-x-4">
            @if (Model.productDetail?.ProductItems?.FirstOrDefault()?.DiscountedPrice != null
            && Model.productDetail?.ProductItems?.FirstOrDefault()?.DiscountedPrice
            < Model.productDetail?.ProductItems?.FirstOrDefault()?.Price)
            {
                <span class="text-2xl font-semibold text-red-500">
                    ₫@Model.productDetail?.ProductItems?.FirstOrDefault()?.DiscountedPrice?.ToString("N0")
                </span>
                <span class="text-lg text-gray-400 line-through">
                    ₫@Model.productDetail?.ProductItems?.FirstOrDefault()?.Price.ToString("N0")
                </span>
            }
            else
            {
                <span class="text-2xl font-semibold text-red-500">
                    ₫@Model.productDetail?.ProductItems?.FirstOrDefault()?.Price.ToString("N0")
                </span>
            }
        </div>

        <!-- Product Materials -->
        <div>
            <div class="mt-2 flex space-x-2">
                @foreach (var variation in Model.VariationOptions)
                {
                    <div class="variation-options">
                        <span class="rounded-full bg-gray-200 px-3 py-1 text-sm">@variation.Name</span>
                        <div class="mt-1">
                            @if (variation.Options != null && variation.Options.Any())
                            {
                                foreach (var option in variation.Options)
                                {
                                    <input type="radio"
                                           id="@option.Id"
                                           name="@variation.Name"
                                           value="@option.Name"
                                           class="mr-2"
                                           onclick="handleRadioClick(this)"
                                           onchange="updateProductInfo()"
                                           data-variation-name="@variation.Name" />
                                    <label for="@option.Id" class="text-sm">@option.Name</label>
                                }
                            }
                            else
                            {
                                <span class="text-sm text-gray-500">No options available</span>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

      
        <div class="price-container">
            <span id="price" class="text-lg font-bold text-gray-800"></span>
            <span id="discountedPrice" class="ml-2 hidden text-lg font-bold text-red-600"></span> <!-- Định nghĩa giá giảm -->
        </div>

        <span id="remainingQuantity" class="text-sm text-gray-600"></span>

        <!-- ADD TO CART-->

        <form method="post">
            <!-- Trường dữ liệu cho CartItem.ProductItemId -->
            <input type="hidden" asp-for="CartItem.ProductItemId" id="productItemId" />
            <div class="container mx-auto p-4">
                <div class="flex items-center space-x-4">
                    <h2 class="text-lg font-semibold text-gray-800">Quantity</h2>
                    <div class="flex items-center rounded-lg border border-gray-300">
                        <button type="button" onclick="decreaseQuantity()" class="rounded-l-lg px-4 py-2 text-gray-700 hover:bg-gray-200">-</button>
                        <input id="quantityInput" asp-for="CartItem.ProductQuantity" type="number" min="1" max="50" class="w-16 px-4 py-2 text-center text-gray-800" value= "1"/>
                        <button type="button" onclick="increaseQuantity()" class="rounded-r-lg px-4 py-2 text-gray-700 hover:bg-gray-200">+</button>
                    </div>
                </div>
            </div>

            <div class="flex space-x-4">
                <!-- Nút "Add to Cart" với điều kiện disable và thay đổi text -->
                <button type="submit"
                        class="flex-1 rounded-lg bg-blue-500 px-4 py-3 text-white hover:bg-blue-600
@(userId == Model.productDetail?.OwnerId ? "opacity-50 cursor-not-allowed pointer-events-none" : "")">
                    @if (userId == Model.productDetail?.OwnerId)
                    {
                        <span>You cannot add your own product</span>
                    }
                    else
                    {
                        <span><i class="fa fa-shopping-cart mr-2"></i> Add to Cart</span>
                    }
                </button>
            </div>
        </form>
    </div>
</div>

<h1 class="mb-4 text-center text-4xl font-bold text-red-600">Product Ratings</h1>

<div class="space-y-4">
    @foreach (var review in Model.Reviews)
    {
        <div class="rounded-lg border border-gray-300 bg-white p-4 shadow-md">
            <div class="flex flex-col">
                <span class="font-semibold">@(Model.Users.FirstOrDefault(user => user.Id == review.UserId)?.UserName ?? "Unknown User")</span>
                <span class="text-sm text-gray-500">@review.Date?.ToString("g")</span>
                <div class="flex items-center">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <svg class="h-5 w-5 @(i <= review.Rating ? "text-yellow-500" : "text-gray-300")" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 .587l3.668 7.568 8.235 1.199-5.964 5.222L19.339 24 12 20.812 4.661 24l1.331-9.424-5.964-5.222 8.235-1.199L12 .587z" />
                        </svg>
                    }
                </div>
                <p class="mt-2">@review.Content</p>
            </div>

            <!-- Reply Section with Shop ID -->
            @if (review.Reply != null){
            <div class="relative ml-4 mt-4 rounded-lg border border-gray-300 bg-gray-50 p-2">
                <div class="mb-2 font-semibold text-gray-700">@(Model.Shops.FirstOrDefault(shop => shop.Id == review.Reply?.ShopId)?.Name ?? "Unknown Shop")</div>
                    <p>@review.Reply.Content</p>
            </div>
            }
        </div>
    }
</div>

@if (Model.TotalPages > 1)
{
    <nav class="mt-4">
        <ul class="flex justify-center space-x-2">
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(Model.PageNumber == i ? "active" : "")">
                    <a class="rounded-md border border-gray-300 px-4 py-2" class="page-link" asp-page="Index" asp-route-pageNumber="@i">@i</a>
                </li>
            }
        </ul>
    </nav>
}



<!-- Include Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

@section Scripts{
    <partial name="_ValidationScriptsPartial" />
    <script>
        let quantity = 1; // Biến để lưu số lượng
        let maxQuantity = 50; // Số lượng tối đa của productItem

        function updateQuantityDisplay() {
            // Cập nhật hiển thị số lượng
            document.getElementById('quantityInput').value = quantity;
        }
        function decreaseQuantity() {
            if (quantity > 1) { // Đảm bảo số lượng không âm
                quantity--; // Giảm số lượng
                updateQuantityDisplay(); // Cập nhật hiển thị
            }
        }

        function increaseQuantity() {
            if (quantity < maxQuantity) { // Không vượt quá số lượng tối đa
                quantity++; // Tăng số lượng
                updateQuantityDisplay(); // Cập nhật hiển thị
            } else {
                // Thông báo cho người dùng khi vượt quá số lượng
                alert(`You cannot increase the quantity beyond ${maxQuantity}.`);
            }
        }
        function handleInputChange() {
            const input = document.getElementById('quantityInput');
            let value = parseInt(input.value, 10);

            // Kiểm tra nếu giá trị nhập vào không hợp lệ hoặc nhỏ hơn 1
            if (isNaN(value) || value < 1) {
                quantity = 1; // Đặt giá trị về 1 nếu không hợp lệ
            } else if (value > maxQuantity) {
                quantity = maxQuantity; // Giới hạn ở số lượng tối đa
                alert(`You cannot increase the quantity beyond ${maxQuantity}.`);
            } else {
                quantity = value; // Cập nhật số lượng
            }

            updateQuantityDisplay();
        }
        // Định dạng giá theo kiểu Việt Nam
        const formatCurrency = (amount) => {
            return new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
            }).format(amount);
        };

        let lastChecked = null;

        function handleRadioClick(radio) {
            // Nếu radio đã được chọn và là tùy chọn đã chọn trước đó, bỏ chọn nó
            if (lastChecked === radio) {
                radio.checked = false; // Bỏ chọn radio
                lastChecked = null; // Đặt lại biến theo dõi
            } else {
                // Cập nhật biến theo dõi
                lastChecked = radio; // Lưu tùy chọn đã chọn
            }

            // Gọi hàm cập nhật thông tin sản phẩm
            updateProductInfo();
        }

        const productItems = @Html.Raw(Json.Serialize(productItems));

        // Hàm cập nhật giá dựa trên lựa chọn của người dùng
        function updateProductInfo() {
            // Tạo một đối tượng lưu trữ các lựa chọn hiện tại của người dùng
            const selectedOptions = {};

            // Duyệt qua tất cả các radio button đang được chọn
            document.querySelectorAll('input[type="radio"]:checked').forEach(input => {
                selectedOptions[input.name] = input.value;
            });

            // Tìm sản phẩm khớp với các tùy chọn đã chọn
            const matchingProduct = productItems.find(item =>
                item.configurations.every(config =>
                    selectedOptions[config.variationName] === config.optionName
                )
            );

            // Cập nhật giá hiển thị
            const priceElement = document.getElementById("price");
            const discountedPriceElement = document.getElementById("discountedPrice");
            const remainingQuantityElement = document.getElementById("remainingQuantity");
            const productItemIdElement = document.getElementById("productItemId");

            if (matchingProduct) {
                // Cập nhật giá trị id
                productItemIdElement.value = matchingProduct.id;
                console.log(matchingProduct)
                remainingQuantityElement.textContent = `Remaining Quantity: ${matchingProduct.quantityInStock}`;

                // Kiểm tra nếu có discountedPrice
                if (matchingProduct.discountedPrice) {
                    priceElement.innerHTML = `<s>${formatCurrency(matchingProduct.price)}</s>`;
                    discountedPriceElement.textContent = `${formatCurrency(matchingProduct.discountedPrice)}`;
                } else {
                    priceElement.textContent = `${formatCurrency(matchingProduct.price)}`;
                    discountedPriceElement.textContent = ""; // Ẩn giá giảm
                }
                maxQuantity = matchingProduct.quantityInStock;
                quantity = Math.min(quantity, maxQuantity);
                updateQuantityDisplay();
            } else {
                // Không tìm thấy sản phẩm khớp => Clear giá, số lượng, và ID sản phẩm
                productItemIdElement.value = ""; // Clear ID
                priceElement.textContent = "N/A"; // Clear giá hiển thị
                discountedPriceElement.textContent = ""; // Clear giá giảm
                remainingQuantityElement.textContent = "Remaining Quantity: N/A"; // Clear số lượng
                quantity = 1; // Đặt lại số lượng về mặc định
                updateQuantityDisplay();
            }
        }


        // Tự động ẩn các Toast sau 3 giây
        document.addEventListener('DOMContentLoaded', function () {
            setTimeout(() => {
                document.querySelectorAll('.fixed > div').forEach(toast => {
                    toast.remove();
                });
            }, 3000); // 3000ms = 3 giây
        });
         function viewProduct() {
        window.location.href = `/Product/ProductList/ProductList`;
    }
    </script>
}




