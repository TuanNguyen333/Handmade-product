@page
@model UI.Pages.ProductDetail.ProductDetailModel

@{
}
@{
    ViewData["Title"] = "ProductDetail";
    var productItems = Model.productDetail.ProductItems;
}

<style>
    /* Ẩn nút tăng giảm trên Chrome, Safari và Edge */
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Ẩn nút tăng giảm trên Firefox */
    input[type=number] {
        -moz-appearance: textfield;
    }
</style>

<div class="flex flex-wrap p-6">
    <!-- Left side: Product Images -->
    <div class="w-full md:w-1/2 p-4">
        <div class="mb-4">
            <!-- Large Image -->
            <img src="@Model.productDetail?.ProductImageUrls.FirstOrDefault()" alt="Product Image" class="w-[600px] h-[550px] object-cover rounded-lg shadow-md mx-auto">
        </div>
        <div class="flex space-x-2">
            <!-- Small Images -->
            @for (int i = 1; i < Math.Min(4, Model.productDetail.ProductImageUrls.Count); i++)
            {
            <img src="@Model.productDetail.ProductImageUrls[i]"
                 alt="Product Thumbnail"
                 class="w-1/5 h-20 object-cover rounded-lg shadow-md cursor-pointer">
            }
        </div>
    </div>

    <!-- Right side: Product Details -->
    <div class="w-full md:w-1/2 p-4 space-y-6">
        <a href="javascript:void(0);" onclick="viewProductList()"
           class="flex items-center px-4 py-2 text-gray-600 bg-gray-200 rounded-lg hover:text-gray-800 font-medium transition duration-300">
            <i class="fa fa-arrow-left mr-2"></i> Back to Products
        </a>
        <!-- Product Name -->
        <h1 class="text-3xl font-bold text-gray-800">@Model.productDetail?.Name</h1>
        <h2 class="text-3xl font-bold text-gray-800">@Model.productDetail?.Description</h2>
        <!-- Product Rating -->
        <div class="rating-stars flex items-center space-x-1">
            @for (int i = 1; i <= 5; i++)
            {
                if (i <= (Model.productDetail?.Rating ?? 0))
                {
                    <i class="fa fa-star" style="color: gold;"></i> <!-- Ngôi sao màu vàng -->
                }
                else
                {
                    <i class="fa fa-star" style="color: gray;"></i> <!-- Ngôi sao màu xám -->
                }
            }
        </div>

        <!-- Product Price -->
        <!-- Product Price -->
        <div class="flex items-center space-x-4">
            @if (Model.productDetail?.ProductItems?.FirstOrDefault()?.DiscountedPrice != null
            && Model.productDetail?.ProductItems?.FirstOrDefault()?.DiscountedPrice
            < Model.productDetail?.ProductItems?.FirstOrDefault()?.Price)
            {
                <span id="discountedPrice" class="text-2xl font-semibold text-red-500">
                    @Model.productDetail?.ProductItems?.FirstOrDefault()?.DiscountedPrice <!-- Hiển thị giá giảm -->
                </span>
                <span id="price" class="text-lg text-gray-400 line-through">
                    @Model.productDetail?.ProductItems?.FirstOrDefault()?.Price <!-- Hiển thị giá gốc, gạch ngang -->
                </span>
            }
            else
            {
                <span id="price" class="text-2xl font-semibold text-red-500">
                    @Model.productDetail?.ProductItems?.FirstOrDefault()?.Price <!-- Hiển thị giá gốc nếu không có giá giảm -->
                </span>
            }
        </div>



        <!-- Product Materials -->
        <div>
            <div class="flex space-x-2 mt-2">
                @foreach (var variation in Model.VariationOptions)
                {
                    <div>
                        <span class="px-3 py-1 text-sm bg-gray-200 rounded-full">@variation.Name</span>
                        <div class="mt-1">
                            @if (variation.Options != null && variation.Options.Any())
                            {
                                foreach (var option in variation.Options)
                                {
                                    <input type="radio"
                                           id="@option.Id"
                                           name="@variation.Name"
                                           value="@option.Name"
                                           class="mr-2"
                                           onchange="updateProductInfo()"
                                           />
                                    <label for="@option.Id" class="text-sm">@option.Name</label>
                                }
                            }
                            else
                            {
                                <span class="text-sm text-gray-500">No options available</span>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="price-container">
            <span id="price" class="text-lg font-bold text-gray-800"></span>
            <span id="discountedPrice" class="text-lg font-bold text-red-600 ml-2 hidden"></span> <!-- Định nghĩa giá giảm -->
        </div>
        <span id="remainingQuantity" class="text-sm text-gray-600"></span>
        
        <div class="container mx-auto p-4">
            <div class="flex items-center space-x-4">
                <h2 class="text-lg font-semibold text-gray-800">Quantity</h2>
                <div class="flex items-center border border-gray-300 rounded-lg">
                    <button onclick="decreaseQuantity()" class="px-4 py-2 text-gray-700 hover:bg-gray-200 rounded-l-lg focus:outline-none">-</button>
                    <!-- Định nghĩa số lượng có thể nhập -->
                     <input id="quantity" type="number" value="1" min="1" max="50" class="w-16 px-4 py-2 text-center text-gray-800 focus:outline-none" oninput="handleInputChange()" />
 
                    <button onclick="increaseQuantity()" class="px-4 py-2 text-gray-700 hover:bg-gray-200 rounded-r-lg focus:outline-none">+</button>
                </div>
            </div>
        </div>
        <!-- Buttons -->
        <div class="flex space-x-4">
            <button class="flex-1 px-4 py-3 text-white bg-blue-500 rounded-lg hover:bg-blue-600">
                <i class="fa fa-shopping-cart mr-2"></i> Add to Cart
            </button>
        </div>
    </div>
</div>

<!-- Include Font Awesome for Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<script>
    let quantity = 1; // Biến để lưu số lượng
    let maxQuantity = 50; // Số lượng tối đa của productItem

    function updateQuantityDisplay() {
        // Cập nhật hiển thị số lượng
        document.getElementById('quantity').value = quantity;
    }
    function decreaseQuantity() {
        if (quantity > 1) { // Đảm bảo số lượng không âm
            quantity--; // Giảm số lượng
            updateQuantityDisplay(); // Cập nhật hiển thị
        }
    }

    function increaseQuantity() {
        if (quantity < maxQuantity) { // Không vượt quá số lượng tối đa
            quantity++; // Tăng số lượng
            updateQuantityDisplay(); // Cập nhật hiển thị
        } else {
            // Thông báo cho người dùng khi vượt quá số lượng
            alert(`You cannot increase the quantity beyond ${maxQuantity}.`);
        }
    }
    function handleInputChange() {
        const input = document.getElementById('quantity');
        let value = parseInt(input.value, 10);

        // Kiểm tra nếu giá trị nhập vào không hợp lệ hoặc nhỏ hơn 1
        if (isNaN(value) || value < 1) {
            quantity = 1; // Đặt giá trị về 1 nếu không hợp lệ
        } else if (value > maxQuantity) {
            quantity = maxQuantity; // Giới hạn ở số lượng tối đa
            alert(`You cannot increase the quantity beyond ${maxQuantity}.`);
        } else {
            quantity = value; // Cập nhật số lượng
        }

        updateQuantityDisplay();
    }
    // Định dạng giá theo kiểu Việt Nam
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(amount);
    };

    const productItems = @Html.Raw(Json.Serialize(productItems));
    // Hàm cập nhật giá dựa trên lựa chọn của người dùng
    function updateProductInfo() {
        // Tạo một đối tượng lưu trữ các lựa chọn hiện tại của người dùng
        const selectedOptions = {};

        // Duyệt qua tất cả các radio button đang được chọn
        document.querySelectorAll('input[type="radio"]:checked').forEach(input => {
            selectedOptions[input.name] = input.value;
        });

        // Tìm sản phẩm khớp với các tùy chọn đã chọn
        const matchingProduct = productItems.find(item =>
            item.configurations.every(config =>
                selectedOptions[config.variationName] === config.optionName
            )
        );
        

        // Cập nhật giá hiển thị
        const priceElement = document.getElementById("price");
        const discountedPriceElement = document.getElementById("discountedPrice");
        const remainingQuantityElement = document.getElementById("remainingQuantity");
        const messageElement = document.getElementById("message"); // Thêm phần tử để hiển thị thông báo


        if (matchingProduct) {
            
            remainingQuantityElement.textContent = `Remaining Quantity: ${matchingProduct.quantityInStock}`;
            // Cập nhật số lượng tối đa

            // Kiểm tra nếu có discountedPrice
            if (matchingProduct.discountedPrice) {
                // Hiển thị giá gốc dạng gạch ngang và giá giảm
                priceElement.innerHTML = `<s>${formatCurrency(matchingProduct.price)}</s>`;
                discountedPriceElement.textContent = `${formatCurrency(matchingProduct.discountedPrice)}`;
            } else {
                // Hiển thị giá gốc khi không có giá giảm
                priceElement.textContent = `${formatCurrency(matchingProduct.price)}`;
                discountedPriceElement.textContent = ""; // Ẩn giá giảm
            }

            maxQuantity = matchingProduct.quantityInStock;
            quantity = Math.min(quantity, maxQuantity); // Đảm bảo số lượng không vượt quá số lượng tối đa
            updateQuantityDisplay(); // Cập nhật hiển thị số lượng
        } else {
            priceElement.textContent = "";
            remainingQuantityElement.textContent = "";
            discountedPriceElement.textContent = "";
        }
    }
    function viewProductList() {
        window.location.href = `/Product/ProductList/ProductList`;
    }

</script>


